#version 400 core

struct Material {
    float ambient;
    float shininess;
};

in vec3 objectColor;
in vec3 Normal;
in vec3 FragPos;

uniform vec3 lightDirFrom;
uniform vec3 viewPos;
uniform Material material;

out vec4 color;


void main()
{
    vec3 lightColor = vec3(0.8f, 0.8f, 0.8f);
    float ambientStrength = material.ambient;
    float specularStrength = 0.5f;

    vec3 ambient = ambientStrength * lightColor;

    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightDirFrom);
    float diff = max(dot(norm, lightDir), 0.0);
    // float diff = max(dot(norm, lightDir), -0.75*dot(norm, lightDir));
    vec3 diffuse = diff * lightColor;

    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = specularStrength * spec * lightColor;

    vec3 result = (ambient + diffuse + specular) * objectColor;
    color = vec4(result, 1.0f);

    if (mod(gl_FragCoord.x, 5.0) > 2.5)
        color = vec4(0.3f, 0.8f, 0.8f, 1.0f);
}